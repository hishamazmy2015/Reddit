package codeForces;

import java.util.Scanner;

public class Bear_and_Finding_Criminals3 {

	public static void main(String[] args) {

		Scanner scan = new Scanner(System.in);
		int maxHeight = 0;
		int n = scan.nextInt();
		int position = scan.nextInt();
		scan.nextLine();
		int distances[] = new int[n];

		int sum = 0;
		int range = 0;
		int direction = 1;
		// To find outlier
//		if (n == position)
//			range = 0;
//		else 
		if (n - position >= position) {
			// Postion is near to 0
			// So outlier near to n and condition is i >= range
			direction = 0;
//			range = position + 1;
			range = (position * 2) - 1;

		} else
			// Postion is near to n
			// So outlier near to 0 and condition is i <= range
			range = position - (n - position);

		for (int i = 0; i < n; i++) {
			distances[i] = scan.nextInt();
			if (direction == 0 && i >= range)
				sum += distances[i];
			if (direction == 1 && i < range - 1)
				sum += distances[i];
		}
//		System.out.println("sum  " + sum);

//		int j, k = 0;
		if (direction == 1)
			for (int i = range - 1, k = n - 1; i <= k; i++, k--) {
//				System.out.println("Count  ar i and k " + i + " " + k);
//				System.out.println(distances[i] + distances[k]);
				if (i == k && distances[i] + distances[k] > 1)
					sum += 1;
				else if (distances[i] + distances[k] > 1)
					sum += 2;
			}
		/*
		 * problems heeeeeeeeeeeeeere
		 */
		else
			for (int i = 0, k = range - 1; i <= k; i++, k--) {
//				System.out.println("Count  ar i and k " + i + " " + k);

				if (i == k && distances[i] + distances[k] > 1)
					sum += 1;
				else if (distances[i] + distances[k] > 1)
					sum += 2;
			}
		System.out.println(sum);
	}
}

//verdict: OK
//Input
//20 17
//1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0
//Output
//10
//Answer
//10
//Checker Log
//ok 1 number(s): "10"

//
//WRONG_ANSWER
//Input
//100 60
//1 1 1 1 1 1 0 1 0 0  1  1  0  1  1  1  1  1  0  0 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 1 0 1 1 0 0 0 0 0 1 1 1 0 1 1 0 0 0 1 0 0 0 1 1 1 0 1 0 0 1 1 1 0 1 1 1 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 1 0 0

//1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

////Output
//12
//Answer
//27
//Checker Log
//wrong answer 1st numbers differ - expected: '27', found: '12'

//20 17
//1 1 0 1 1 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0

//Input
//9 3
//1 1 1 1 1 1 1 1 0
//Output
//11
//Answer
//8

// List<Integer> list = Arrays.stream(heights2).boxed().collect(Collectors.toList());
// List<int[]> list = Arrays.asList(heights2);
// Collections.sort(list);
